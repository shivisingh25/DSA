class Solution {
public:

    int priority(char c) {
        if(c == '^') return 3;
        else if(c == '*' || c == '/') return 2;
        else if(c == '+' || c == '-') return 1;
        return -1;
    }

    string infixToPrefix(const string& s) {
        // Your code goes here

        string rev = s;
        reverse(rev.begin(), rev.end());

        for(int i = 0;i<rev.length();i++){
            if (rev[i] == '(') rev[i] = ')';
            else if (rev[i] == ')') rev[i] = '(';
        }

        int i=0;
        stack<char> st;
        string ans="";

        while(i < rev.length()){
            if((rev[i] >= 'A' && rev[i] <= 'Z') || (rev[i] >= 'a' && rev[i] <= 'z') || (rev[i] >= '0' && rev[i] <= '9') ){
                ans += rev[i];
            }
            else if(rev[i] == '('){
                st.push(rev[i]);
            }
            else if(rev[i] == ')'){
                while(!st.empty() && st.top() != '('){
                    ans += st.top();
                    st.pop();
                }
                st.pop();
            }
            else{
                if(rev[i] == '^'){
                    while(!st.empty() && (priority(rev[i]) <= priority(st.top()))){
                    ans += st.top();
                    st.pop();
                }
                }
                 else{
                    while(!st.empty() && (priority(rev[i]) < priority(st.top()))){
                    ans += st.top();
                    st.pop();
                }
                }
                st.push(rev[i]);
            }
            i++;
        }
        while(!st.empty()){
            ans += st.top();
            st.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};